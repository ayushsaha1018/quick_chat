// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(191)
  email      String      @unique
  provider   String
  oauth_id   String
  image      String?
  created_at DateTime    @default(now())
  ChatGroup  ChatGroup[]

  @@map("users")
}

model ChatGroup {
  id         String       @id @default(uuid()) @db.Uuid
  user       User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  title      String       @db.VarChar(191)
  created_at DateTime     @default(now())
  Chats      Chats[]
  GroupUsers GroupUsers[]

  @@index([user_id, created_at])
  @@map("chat_groups")
}

enum UserRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
}

model GroupUsers {
  id         Int         @id @default(autoincrement())
  group      ChatGroup   @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id   String      @db.Uuid
  name       String
  role       UserRole    @default(MEMBER)
  status     UserStatus  @default(OFFLINE)
  last_seen  DateTime?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  messages   Chats[]     @relation("UserMessages")
  reactions  MessageReaction[]

  @@map("group_users")
}

model Chats {
  id         String    @id @default(uuid())
  group      ChatGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id   String    @db.Uuid
  message    String?
  name       String
  file       String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  deleted_by String?
  sender     GroupUsers @relation("UserMessages", fields: [sender_id], references: [id])
  sender_id  Int
  parent_id  String?
  parent     Chats?    @relation("MessageThread", fields: [parent_id], references: [id])
  replies    Chats[]   @relation("MessageThread")
  reactions  MessageReaction[]

  @@index([created_at])
  @@map("chats")
}

model MessageReaction {
  id         Int       @id @default(autoincrement())
  message    Chats     @relation(fields: [message_id], references: [id], onDelete: Cascade)
  message_id String
  user       GroupUsers @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  emoji      String
  created_at DateTime  @default(now())

  @@unique([message_id, user_id, emoji])
  @@map("message_reactions")
}
